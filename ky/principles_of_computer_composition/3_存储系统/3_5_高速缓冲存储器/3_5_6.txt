1
    01 B 
    02 C 
    03 C 
    04 D
    05 A
    06 C
    07 B 
    08 A
    09 A x  D
    10 A
    11 A
    12 A
    13 C 
    14 B x  D
    15 C 
    16 D x  A
    17 B x  C
    18 ?C
    19 A x  B
    20 B 
    21 D
    22 A
    23 C 
    24 A
    25 B
    26 D
    27 D
    28 C
    29 A x  C
    30 D x  C
    31 A
    32 A
    33 A

2
    01 
        1) 处理大量存储器写操作
            写命中:回写法
            写不命中:相同存储器的大量写操作:写分配法
                    不同存储器的大量写操作:非写分配法
        2) 写命中:全写法(直写法)
           写不命中:非写分配法

    02
        1) 
            Offset:0-5, 6位
            Index:6-10, 5位
            Tag:11-31, 21位
        2)
            68480b

    03
        1) 512 行，128 组
        2) 512 个标记项，标记位长度 = 32-7-7=18
        3) (18+2+1)*512 =  10752b
           (18+2+2)*512 = 11264b

    04 
        1) s = 64, 100%
           s = 63, 67%
        2)
           s = 64, 2/(2x10000) = 1/10000
           s = 63, 3

    05
        1) x
        2) a[0][31] 第4行
           a[1][1] 第4行
        3) A 命中率 = 15/16
           B 命中率 = 0
           A 执行时间最短

    06 
        1) 
            CPU 时钟周期 T = 1/(800x10^6) = 1.25x10^-9s = 1.25 ns
            总线时钟周期 T = 1/(200x10^6) = 5 ns
            总线带宽 32b/40ns = 1x10^8 b/s
        2) 2个，Cache 缺失一次，从内存取一次
        3) 2x5 = 10 ns

    07
        1) Tag 位数 = 20b  LRU 占 3 b ，直写法没有修改位
        2) 64 次
        3) 从第 0 组，比较 tag 为 0 的行，找到的话，就找行内地址为 01 0011 的元素
           若未找到，从内存中找到该单元数据，然后放到第 0 行