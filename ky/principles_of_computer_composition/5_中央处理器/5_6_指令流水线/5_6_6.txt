1
    01 D
    02 C x  A
    03 B
    04 C 
    05 D
    06 D
    07 C x  A
    08 C x  B
    09 C x  D
    10 B
    11 A 
    12 D
    13 B x  D
    14 D
    15 C 
    16 B
    17 D
    18 D
    19 B
    20 A
    21 A
    22 D
    23 C
    24 D
    25 B
    26 A x  C
    27 C x  A
    28 D
    29 C
    30 B
    31 D x  C

201
    1) 100ns x 4 = 400ns
    2) 300 ns
    3) 200 ns

202
    4) (n-4+1)x100 = 1x10^9
        n = 10^7+3

203
    1) 
       0x FEFF
    2) 4+5-1 = 8
    3) I3 的 ID 段被阻塞是由于在 I3 的 ID 段需要指令译码并且取操作数 R1和R2
       此时 R1 和 R2 必须得 I2 的 LOAD 指令执行完成后才会放到指定寄存器
       I4 的 IF 段被阻塞是由于 I3 的 IF 段中寄存器的数据还未被 I3 ID 段取走，
       所以只能等待
    4) 
        高级语言程序:x = x*2+a 
        I1:LOAD R1, [x]
        I2:SHL R1
        I3:LOAD R2, [a]
        I4:ADD R1, R2
        I5:STORE R2, [x]
        
        1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18
    I1  IF  ID  EX  M   WB 
    I2      IF              ID  EX  M   WB
    I3                      IF  ID  EX  M   WB
    I4                          IF              ID  EX  M   WB                
    I5                                          IF              ID  EX  M   WB

204
    1) 按字节编址
    2) 4x8b = 32bit
    3) 0xEC
       0x0804 8114 - 0x0804 8100 = 0x14 = 20
    4) 数据相关的指令: 1 和 2，2 和 3，3 和 4，4 和 6
       控制冒险: 6 号指令
       指令 1 与指令 5 不会因为数据相关而发生阻塞的原因:已经过了指令 1 的指令周期

205 
    1) 1000
    2) 16x32B = 512B
       28/32 = 87.5%
    3) 第4条指令可能会发生溢出异常
       
       对于数组A的访问:读磁盘至少一次，读 TLB 至少